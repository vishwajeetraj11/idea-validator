// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Idea {
    id        Int          @id @default(autoincrement())
    content   String
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
    essence   IdeaEssence?
    surveys   Survey[]
    Question  Question[]
    Persona   Persona[]
    Insights  Insights[]
}

model IdeaEssence {
    id          Int      @id @default(autoincrement())
    name        String
    description String
    usp         String
    problem     String
    solution    String
    features    String[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    idea        Idea     @relation(fields: [ideaId], references: [id])
    ideaId      Int      @unique
}

model Survey {
    id        Int        @id @default(autoincrement())
    title     String
    questions Question[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    idea      Idea       @relation(fields: [ideaId], references: [id])
    ideaId    Int
    responses Response[]
}

model Question {
    id        Int        @id @default(autoincrement())
    content   String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    survey    Survey     @relation(fields: [surveyId], references: [id])
    surveyId  Int
    idea      Idea       @relation(fields: [ideaId], references: [id])
    ideaId    Int
    section   String
    responses Response[]
}

model Persona {
    id                 Int        @id @default(autoincrement())
    name               String
    idea               Idea       @relation(fields: [ideaId], references: [id])
    ideaId             Int
    age                Int
    occupation         String
    goals              String[]
    challenges         String[]
    habits             String[]
    motivations        String[]
    createdAt          DateTime   @default(now())
    updatedAt          DateTime   @updatedAt
    responses          Response[]
    likes              String?
    mainReasonToBuy    String?
    mainReasonNotToBuy String?
}

model Response {
    id         Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    persona    Persona  @relation(fields: [personaId], references: [id])
    personaId  Int
    question   Question @relation(fields: [questionId], references: [id])
    questionId Int
    answer     String
    Survey     Survey?  @relation(fields: [surveyId], references: [id])
    surveyId   Int?
}

model Insights {
    id                    Int      @id @default(autoincrement())
    createdAt             DateTime @default(now())
    updatedAt             DateTime @updatedAt
    keyInsights           String
    readout               String
    pmfViabilityScore     Int
    reasoning             String
    strengths             Json
    weaknesses            Json
    potentialEnhancements Json
    idea                  Idea     @relation(fields: [ideaId], references: [id])
    ideaId                Int
}
